AWSTemplateFormatVersion: '2010-09-09'
Description: An example service that deploys in AWS VPC networking mode
             on AWS Fargate. Service runs with networking in private subnets
             and with private IP addresses only.

Parameters:
  ECRUri:
    Type: String
    Description: The url of a container image that contains the application process
  VpcId:
    Type: String
    Description: The VPC that the service is running inside of
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of private subnet ID's to put the tasks in
  PrivateLinkEndpointSecurityGroup:
    Type: String
    Description: The security group on the PrivateLink endpoints. It must accept traffic from the service's SG.

Resources:
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 256
        Subnets: !Ref PrivateSubnetIds
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
      State: ENABLED

  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: "After_upload_definition"
      PlatformCapabilities:
        - FARGATE
      ContainerProperties:
        Image: !Sub '${ECRUri}/after_upload'
        ExecutionRoleArn: !GetAtt BatchExecutionRole.Arn
        JobRoleArn: !GetAtt BatchExecutionRole.Arn
        ResourceRequirements:
            - Type: VCPU
              Value: 0.25
            - Type: MEMORY
              Value: 512
        Environment:
          - Name: "OUTPUT_BUCKET"
            Value: !Ref S3OutputBucket
      RetryStrategy:
        Attempts: 1

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED

  # Security group that limits network access
  # to the task
  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for batch tasks
      VpcId: !Ref VpcId

  # IAM role that allows the batch service to interact with other
  # AWS services
  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "BatchExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "ecr:DescribeImageScanFindings"
                  - "ecr:GetLifecyclePolicyPreview"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:DescribeImageReplicationStatus"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListTagsForResource"
                  - "ecr:BatchGetRepositoryScanningConfiguration"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:GetLifecyclePolicy"
                  - "ecr:ValidatePullThroughCacheRule"
                  - "ecr:DescribeRepositoryCreationTemplate"
                  - "ecr:GetRegistryPolicy"
                  - "ecr:DescribeRegistry"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetRegistryScanningConfiguration"
                Resource: "*"
        - PolicyName: "BatchExecutionPolicy2"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Open up the PrivateLink endpoints to accepting inbound traffic
  # from the service deploying in AWS Fargate.
  PrivateLinkIngressFromService:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the batch container
      GroupId: !Ref PrivateLinkEndpointSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref BatchSecurityGroup

  # This log group stores the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup

  S3OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'sources-out-bucket'
      AccessControl: Private

Outputs:
  JobQueueArn:
    Description: The ARN of the job queue
    Value: !Ref JobQueue
  JobDefinitionArn:
    Description: The ARN of the job definition
    Value: !Ref JobDefinition
