AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy the server Nextjs application in an AppRunner service
             inside the public subnets of the VPC

Parameters:
  ECRUri:
    Type: String
    Description: The url of a container image that contains the application process
  VpcId:
    Type: String
    Description: The VPC that the service is running inside of
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet ID's to put the server in
  SourceBucket:
    Type: String
    Description: The S3 bucket that contains the source code of the application

Resources:
  Service:
    Type: AWS::AppRunner::Service
    DependsOn: AccessRole
    Properties:
      ServiceName: Server
      SourceConfiguration:
        AuthenticationConfiguration:           
          AccessRoleArn: !GetAtt AccessRole.Arn
        AutoDeploymentsEnabled: false
        ImageRepository:
          ImageIdentifier: '909166668781.dkr.ecr.eu-west-1.amazonaws.com/app:latest'
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: 3000
            RuntimeEnvironmentVariables:
              - Name: HOSTNAME
                Value: '0.0.0.0'
              - Name: AWS_REGION
                Value: !Ref 'AWS::Region'
              - Name: SOURCE_BUCKET
                Value: !Ref SourceBucket
      InstanceConfiguration:
        InstanceRoleArn: !GetAtt InstanceRole.Arn
      #NetworkConfiguration:
        #EgressConfiguration:
          #EgressType: VPC
          #VpcConnectorArn: !Ref VPCConnector

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - build.apprunner.amazonaws.com
                - tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
  
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess

  InstanceRole:
    Metadata:
      'aws:copilot:description': 'An IAM role to control permissions for the containers in your service'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: arn:aws:logs:*:*:*

  VPCConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the vpc - server
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0

